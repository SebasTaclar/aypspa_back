import { AzureFunction, Context, HttpRequest } from '@azure/functions';
import { ClientFactory } from '../src/factories/ClientFactory';
import { ClientService } from '../src/application/services/ClientService';
import { FunctionHandler } from '../src/application/services/Main';
import { LogModel } from '../src/domain/entities/LogModel';
import { Client } from '../src/domain/entities/Client';

const funcCreateClient: AzureFunction = async function (
  context: Context,
  req: HttpRequest,
  log: LogModel
): Promise<void> {
  try {
    log.logInfo(`Http function processed request for url "${req.url}"`);

    if (!req.body) {
      context.res = {
        status: 400,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify({
          success: false,
          error: 'Bad Request',
          message: 'Request body is required',
        }),
      };
      return;
    }

    const clientService: ClientService = await ClientFactory(log);

    // Validate required fields
    const requiredFields = ['name'];
    const missingFields = requiredFields.filter((field) => !req.body[field]);

    if (missingFields.length > 0) {
      context.res = {
        status: 400,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify({
          success: false,
          error: 'Bad Request',
          message: `Missing required fields: ${missingFields.join(', ')}`,
        }),
      };
      return;
    }

    // Create client data without ID (let database auto-generate it)
    const clientData: Omit<Client, 'id'> = {
      name: req.body.name,
      companyName: req.body.companyName || '',
      companyDocument: req.body.companyDocument || '',
      rut: req.body.rut || '',
      phoneNumber: req.body.phoneNumber || '',
      address: req.body.address || '',
      creationDate: req.body.creationDate || new Date().toISOString(),
      frequentClient: req.body.frequentClient || '',
      created: req.body.created || new Date().toISOString(),
      photoFileName: req.body.photoFileName || undefined,
    };

    // Cast to Client type (ID will be generated by database)
    const clientToCreate = { id: '', ...clientData } as Client;

    log.logInfo(`Creating client with name: ${clientData.name}`);
    const createdClient = await clientService.createClient(clientToCreate);

    log.logInfo(`Successfully created client with ID: ${createdClient.id}`);

    context.res = {
      status: 201,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
      body: JSON.stringify({
        success: true,
        data: createdClient,
        message: 'Client created successfully',
      }),
    };
  } catch (error) {
    log.logError(`Error in funcCreateClient: ${error.message}`);
    log.logError(`Stack trace: ${error.stack}`);

    context.res = {
      status: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({
        success: false,
        error: 'Internal server error',
        message: 'Failed to create client',
      }),
    };
  }
};

export = FunctionHandler(funcCreateClient);
